[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "calc",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "SimpleTestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "SimpleTestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "# type: ignore\n                                  SpectacularAPIView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "SpectacularSwaggerView",
        "importPath": "drf_spectacular.views",
        "description": "drf_spectacular.views",
        "isExtraImport": true,
        "detail": "drf_spectacular.views",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "core.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "core.models",
        "description": "core.models",
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "importPath": "core.models",
        "description": "core.models",
        "isExtraImport": true,
        "detail": "core.models",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "call_command",
        "importPath": "django.core.management",
        "description": "django.core.management",
        "isExtraImport": true,
        "detail": "django.core.management",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "APIClient",
        "importPath": "rest_framework.test",
        "description": "rest_framework.test",
        "isExtraImport": true,
        "detail": "rest_framework.test",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "mixins",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "authentication",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeDetailSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "importPath": "recipe.serializers",
        "description": "recipe.serializers",
        "isExtraImport": true,
        "detail": "recipe.serializers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "recipe",
        "description": "recipe",
        "isExtraImport": true,
        "detail": "recipe",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "recipe",
        "description": "recipe",
        "isExtraImport": true,
        "detail": "recipe",
        "documentation": {}
    },
    {
        "label": "TokenAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "user",
        "description": "user",
        "isExtraImport": true,
        "detail": "user",
        "documentation": {}
    },
    {
        "label": "ObtainAuthToken",
        "importPath": "rest_framework.authtoken.views",
        "description": "rest_framework.authtoken.views",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.views",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework.settings",
        "description": "rest_framework.settings",
        "isExtraImport": true,
        "detail": "rest_framework.settings",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "user.serializers",
        "description": "user.serializers",
        "isExtraImport": true,
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "AuthTokenSerializer",
        "importPath": "user.serializers",
        "description": "user.serializers",
        "isExtraImport": true,
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.app.asgi",
        "description": "app.app.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "app.app.asgi",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "app.app.calc",
        "description": "app.app.calc",
        "peekOfCode": "def add(x, y):\n    \"\"\"Add x and y and return result. \"\"\"\n    return x + y\ndef subtract(x, y):\n    \"\"\"subtract x and y and return result.\"\"\"\n    return y - x",
        "detail": "app.app.calc",
        "documentation": {}
    },
    {
        "label": "subtract",
        "kind": 2,
        "importPath": "app.app.calc",
        "description": "app.app.calc",
        "peekOfCode": "def subtract(x, y):\n    \"\"\"subtract x and y and return result.\"\"\"\n    return y - x",
        "detail": "app.app.calc",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-)jh(boy)a%bmyc8$l8ljr#fp18x&8*v^mjop^1a%d#^&cr21y4'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['0.0.0.0',]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-)jh(boy)a%bmyc8$l8ljr#fp18x&8*v^mjop^1a%d#^&cr21y4'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['0.0.0.0',]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['0.0.0.0',]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['0.0.0.0',]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'app.urls'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "ROOT_URLCONF = 'app.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "WSGI_APPLICATION = 'app.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.environ.get('DB_HOST'),\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS')",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.environ.get('DB_HOST'),\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS')\n    }\n}\n# Password validation",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/static/'\nMEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/static/'\nMEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "USE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/static/'\nMEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'\n# Default primary key field type",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "USE_L10N",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "USE_L10N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/static/'\nMEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/static/'\nMEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "STATIC_URL = '/static/static/'\nMEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "MEDIA_URL = '/static/media/'\nMEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "MEDIA_ROOT = '/vol/web/media/'\nSTATIC_ROOT = '/vol/web/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "STATIC_ROOT = '/vol/web/static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'core.User'\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "app.app.settings",
        "description": "app.app.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',\n}",
        "detail": "app.app.settings",
        "documentation": {}
    },
    {
        "label": "calcTests",
        "kind": 6,
        "importPath": "app.app.tests",
        "description": "app.app.tests",
        "peekOfCode": "class calcTests(SimpleTestCase):\n    \"\"\"Test the calc module\"\"\"\n    def test_add_numbers(self):\n        \"\"\"Test adding numbers together\"\"\"\n        res = calc.add(5, 6)\n        self.assertEqual(res, 11)\n    def test_subtract_numbers(self):\n        \"\"\"Test subtract numbers \"\"\"\n        res = calc.subtract(10, 15)\n        self.assertEqual(res, 5)",
        "detail": "app.app.tests",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.app.urls",
        "description": "app.app.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/schema/', SpectacularAPIView.as_view(), name='api-schema'),\n    path(\n        'api/docs/',\n        SpectacularSwaggerView.as_view(url_name='api-schema'), name='api-docs'\n        ),\n    path('api/user/', include('user.urls')),\n    path('api/recipe/', include('recipe.urls')),\n]",
        "detail": "app.app.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.app.wsgi",
        "description": "app.app.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.app.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "app.core.management.commands.wait_for_db",
        "description": "app.core.management.commands.wait_for_db",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"Django Command to wait for Database.\"\"\"\n    def handle(self, *args, **options):\n        \"\"\"Entrypoint for command.\"\"\"\n        self.stdout.write('Wait for database')\n        \"\"\" the command self.stdout is for standard output stream\"\"\"\n        db_up = False\n        while db_up is False:\n            try:\n                self.check(databases=['default'])",
        "detail": "app.core.management.commands.wait_for_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0001_initial",
        "description": "app.core.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "app.core.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0002_alter_recipe_link",
        "description": "app.core.migrations.0002_alter_recipe_link",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='recipe',\n            name='link',\n            field=models.CharField(blank=True, max_length=255),\n        ),",
        "detail": "app.core.migrations.0002_alter_recipe_link",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0003_alter_recipe_link",
        "description": "app.core.migrations.0003_alter_recipe_link",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0002_alter_recipe_link'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='recipe',\n            name='link',\n            field=models.URLField(blank=True, max_length=255),\n        ),",
        "detail": "app.core.migrations.0003_alter_recipe_link",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0004_tag_recipe_tags",
        "description": "app.core.migrations.0004_tag_recipe_tags",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0003_alter_recipe_link'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Tag',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "app.core.migrations.0004_tag_recipe_tags",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0005_alter_recipe_tags",
        "description": "app.core.migrations.0005_alter_recipe_tags",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0004_tag_recipe_tags'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='recipe',\n            name='tags',\n            field=models.ManyToManyField(related_name='recipes', to='core.tag'),\n        ),",
        "detail": "app.core.migrations.0005_alter_recipe_tags",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0006_ingredient_recipe_ingredients",
        "description": "app.core.migrations.0006_ingredient_recipe_ingredients",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0005_alter_recipe_tags'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Ingredient',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),",
        "detail": "app.core.migrations.0006_ingredient_recipe_ingredients",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "app.core.migrations.0007_recipe_image",
        "description": "app.core.migrations.0007_recipe_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('core', '0006_ingredient_recipe_ingredients'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='recipe',\n            name='image',\n            field=models.ImageField(blank=True, null=True, upload_to=core.models.recipe_image_file_path),\n        ),",
        "detail": "app.core.migrations.0007_recipe_image",
        "documentation": {}
    },
    {
        "label": "AdminSiteTests",
        "kind": 6,
        "importPath": "app.core.tests.test_admin",
        "description": "app.core.tests.test_admin",
        "peekOfCode": "class AdminSiteTests(TestCase):\n    \"\"\"Tests for Django admin\"\"\"\n    def setUp(self):\n        \"\"\" Create user and client \"\"\"\n        self.client = Client()\n        self.admin_user = get_user_model().objects.create_superuser(\n            email='admin@example.com',\n            password='testpass123'\n        )\n        self.client.force_login(self.admin_user)",
        "detail": "app.core.tests.test_admin",
        "documentation": {}
    },
    {
        "label": "CommandTests",
        "kind": 6,
        "importPath": "app.core.tests.test_commands",
        "description": "app.core.tests.test_commands",
        "peekOfCode": "class CommandTests(SimpleTestCase):\n    \"\"\"Test Commands.\"\"\"\n    def test_wait_for_db_ready(self, patched_check):\n        \"\"\"Test waiting for database if database ready.\"\"\"\n        patched_check.return_value = True\n        call_command('wait_for_db')\n        patched_check.assert_called_once_with(databases=['default'])\n    @patch('time.sleep')\n    def test_wait_for_db_delay(self, patched_sleep, patched_check):\n        \"\"\"Test waitinf for database when getting OperationalError.\"\"\"",
        "detail": "app.core.tests.test_commands",
        "documentation": {}
    },
    {
        "label": "ModelTests",
        "kind": 6,
        "importPath": "app.core.tests.test_models",
        "description": "app.core.tests.test_models",
        "peekOfCode": "class ModelTests(TestCase):\n    \"\"\"Test models.\"\"\"\n    def test_create_user_with_email_successful(self):\n        \"\"\"Test creating a user with an email successful.\"\"\"\n        email = 'test@example.com'\n        password = 'testpass123'\n        user = get_user_model().objects.create_user(email=email,\n                                                    password=password,\n                                                    )\n        self.assertEqual(user.email, email)",
        "detail": "app.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.core.tests.test_models",
        "description": "app.core.tests.test_models",
        "peekOfCode": "def create_user(email='user@example.com', password='testpass'):\n    \"\"\"Create and return a new user\"\"\"\n    return get_user_model().objects.create_user(email, password)\nclass ModelTests(TestCase):\n    \"\"\"Test models.\"\"\"\n    def test_create_user_with_email_successful(self):\n        \"\"\"Test creating a user with an email successful.\"\"\"\n        email = 'test@example.com'\n        password = 'testpass123'\n        user = get_user_model().objects.create_user(email=email,",
        "detail": "app.core.tests.test_models",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "app.core.admin",
        "description": "app.core.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    \"\"\"Define the admin pages for users.\"\"\"\n    ordering = ['id']\n    list_display = ['email', 'name']\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        (\n            _('Permissions'),\n            {\n                'fields': (",
        "detail": "app.core.admin",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "app.core.apps",
        "description": "app.core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "app.core.apps",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Manager for users.\"\"\"\n    def create_user(self, email, password=None, **extra_fields):\n        \"\"\"Create, Save and return a new user.\"\"\"\n        if not email:\n            raise ValueError('User Must have an email address')\n        user = self.model(email=self.normalize_email(email), **extra_fields)\n        user.set_password(password)\n        user.save(using=self.db)\n        return user",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    \"\"\"user in the system.\"\"\"\n    email = models.EmailField(max_length=255, unique=True)\n    name = models.CharField(max_length=255)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    objects = UserManager()\n    USERNAME_FIELD = 'email'\nclass Recipe(models.Model):\n    \"\"\"Recipe Object\"\"\"",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "Recipe",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class Recipe(models.Model):\n    \"\"\"Recipe Object\"\"\"\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        )\n    title = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    time_minutes = models.IntegerField(blank=True)\n    price = models.DecimalField(",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class Tag(models.Model):\n    \"\"\"Tag for filtering recipes.\"\"\"\n    name = models.CharField(max_length=255)\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        )\n    def __str__(self):\n        return self.name\nclass Ingredient(models.Model):",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "Ingredient",
        "kind": 6,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "class Ingredient(models.Model):\n    \"\"\"Ingredient for recipes.\"\"\"\n    name = models.CharField(max_length=255)\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.CASCADE,\n        )\n    def __str__(self):\n        return self.name",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "recipe_image_file_path",
        "kind": 2,
        "importPath": "app.core.models",
        "description": "app.core.models",
        "peekOfCode": "def recipe_image_file_path(instance, filename):\n    \"\"\"Generates file path for new recipe image\"\"\"\n    ext = os.path.splitext(filename)[1]\n    filename = f'{uuid.uuid4()}{ext}'\n    return os.path.join('uploads', 'recipe', filename)\nclass UserManager(BaseUserManager):\n    \"\"\"Manager for users.\"\"\"\n    def create_user(self, email, password=None, **extra_fields):\n        \"\"\"Create, Save and return a new user.\"\"\"\n        if not email:",
        "detail": "app.core.models",
        "documentation": {}
    },
    {
        "label": "PublicIngredientsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "class PublicIngredientsApiTests(TestCase):\n    \"\"\"Test the publicly available ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_auth_required(self):\n        \"\"\"Test that authentication is required\"\"\"\n        res = self.client.get(INGREDIENTS_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateIngredientsApiTests(TestCase):\n    \"\"\"Test the private ingredients API\"\"\"",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "PrivateIngredientsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "class PrivateIngredientsApiTests(TestCase):\n    \"\"\"Test the private ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n        self.user = create_user()\n        self.client.force_authenticate(self.user)\n    def test_retrieve_ingredients(self):\n        \"\"\"Test retrieving a list of ingredients\"\"\"\n        Ingredient.objects.create(user=self.user, name='Kale')\n        Ingredient.objects.create(user=self.user, name='Vanilla')",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "def create_user(email='user@example.com', password='testpass'):\n    \"\"\"Create and return a user\"\"\"\n    return get_user_model().objects.create_user(email, password)\ndef detail_url(ingredient_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:ingredient-detail', args=[ingredient_id])\nclass PublicIngredientsApiTests(TestCase):\n    \"\"\"Test the publicly available ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "detail_url",
        "kind": 2,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "def detail_url(ingredient_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:ingredient-detail', args=[ingredient_id])\nclass PublicIngredientsApiTests(TestCase):\n    \"\"\"Test the publicly available ingredients API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_auth_required(self):\n        \"\"\"Test that authentication is required\"\"\"\n        res = self.client.get(INGREDIENTS_URL)",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "INGREDIENTS_URL",
        "kind": 5,
        "importPath": "app.recipe.tests.test_ingredients_api",
        "description": "app.recipe.tests.test_ingredients_api",
        "peekOfCode": "INGREDIENTS_URL = reverse('recipe:ingredient-list')\ndef create_user(email='user@example.com', password='testpass'):\n    \"\"\"Create and return a user\"\"\"\n    return get_user_model().objects.create_user(email, password)\ndef detail_url(ingredient_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:ingredient-detail', args=[ingredient_id])\nclass PublicIngredientsApiTests(TestCase):\n    \"\"\"Test the publicly available ingredients API\"\"\"\n    def setUp(self):",
        "detail": "app.recipe.tests.test_ingredients_api",
        "documentation": {}
    },
    {
        "label": "PublicRecipeApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_recipe_api",
        "description": "app.recipe.tests.test_recipe_api",
        "peekOfCode": "class PublicRecipeApiTests(TestCase):\n    \"\"\"Test unathenticated API requests.\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_auth_required(self):\n        \"\"\"Test that authentication is required\"\"\"\n        res = self.client.get(RECIPES_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateRecipeApiTests(TestCase):\n    \"\"\"Test athenticated API requests\"\"\"",
        "detail": "app.recipe.tests.test_recipe_api",
        "documentation": {}
    },
    {
        "label": "PrivateRecipeApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_recipe_api",
        "description": "app.recipe.tests.test_recipe_api",
        "peekOfCode": "class PrivateRecipeApiTests(TestCase):\n    \"\"\"Test athenticated API requests\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n        self.user = create_user(\n            email='user@example.com',\n            password='testpass123',\n        )\n        self.client.force_authenticate(self.user)\n    def test_retrieve_recipes(self):",
        "detail": "app.recipe.tests.test_recipe_api",
        "documentation": {}
    },
    {
        "label": "detail_url",
        "kind": 2,
        "importPath": "app.recipe.tests.test_recipe_api",
        "description": "app.recipe.tests.test_recipe_api",
        "peekOfCode": "def detail_url(recipe_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:recipe-detail', args=[recipe_id])\ndef create_recipe(user, **params):    # sourcery skip: remove-unreachable-code\n    \"\"\"Create and return a sample Recipe\"\"\"\n    defaults = {\n        'title': 'Sample title Recipe',\n        \"description\": 'Sample Recipe',\n        'time_minutes': 10,\n        'price': Decimal('5.00'),",
        "detail": "app.recipe.tests.test_recipe_api",
        "documentation": {}
    },
    {
        "label": "create_recipe",
        "kind": 2,
        "importPath": "app.recipe.tests.test_recipe_api",
        "description": "app.recipe.tests.test_recipe_api",
        "peekOfCode": "def create_recipe(user, **params):    # sourcery skip: remove-unreachable-code\n    \"\"\"Create and return a sample Recipe\"\"\"\n    defaults = {\n        'title': 'Sample title Recipe',\n        \"description\": 'Sample Recipe',\n        'time_minutes': 10,\n        'price': Decimal('5.00'),\n        'link': 'http://example.com/recipe.pdf',\n    } | params\n    return Recipe.objects.create(user=user, **defaults)",
        "detail": "app.recipe.tests.test_recipe_api",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.recipe.tests.test_recipe_api",
        "description": "app.recipe.tests.test_recipe_api",
        "peekOfCode": "def create_user(**params):\n    \"\"\"Create and return a new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicRecipeApiTests(TestCase):\n    \"\"\"Test unathenticated API requests.\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_auth_required(self):\n        \"\"\"Test that authentication is required\"\"\"\n        res = self.client.get(RECIPES_URL)",
        "detail": "app.recipe.tests.test_recipe_api",
        "documentation": {}
    },
    {
        "label": "RECIPES_URL",
        "kind": 5,
        "importPath": "app.recipe.tests.test_recipe_api",
        "description": "app.recipe.tests.test_recipe_api",
        "peekOfCode": "RECIPES_URL = reverse('recipe:recipe-list')\ndef detail_url(recipe_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:recipe-detail', args=[recipe_id])\ndef create_recipe(user, **params):    # sourcery skip: remove-unreachable-code\n    \"\"\"Create and return a sample Recipe\"\"\"\n    defaults = {\n        'title': 'Sample title Recipe',\n        \"description\": 'Sample Recipe',\n        'time_minutes': 10,",
        "detail": "app.recipe.tests.test_recipe_api",
        "documentation": {}
    },
    {
        "label": "PublicTagsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "class PublicTagsApiTests(TestCase):\n    \"\"\"Test the publicly/Unauthenticated available tags API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_auth_required(self):\n        \"\"\"Test that authentication is required for retrieving tags\"\"\"\n        res = self.client.get(TAGS_URL)\n        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)\nclass PrivateTagsApiTests(TestCase):\n    \"\"\"Test the authenticated available tags API\"\"\"",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "PrivateTagsApiTests",
        "kind": 6,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "class PrivateTagsApiTests(TestCase):\n    \"\"\"Test the authenticated available tags API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n        self.user = create_user()\n        self.client.force_authenticate(self.user)\n    def test_retrieve_tags(self):\n        \"\"\"Test retrieving a list of tags\"\"\"\n        Tag.objects.create(user=self.user, name='Vegan')\n        Tag.objects.create(user=self.user, name='Dessert')",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "detail_url",
        "kind": 2,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "def detail_url(tag_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:tag-detail', args=[tag_id])\ndef create_user(email='user@examp.com', password='testpass'):\n    \"\"\"Create and return a User\"\"\"\n    return get_user_model().objects.create_user(email, password)\nclass PublicTagsApiTests(TestCase):\n    \"\"\"Test the publicly/Unauthenticated available tags API\"\"\"\n    def setUp(self):\n        self.client = APIClient()",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "def create_user(email='user@examp.com', password='testpass'):\n    \"\"\"Create and return a User\"\"\"\n    return get_user_model().objects.create_user(email, password)\nclass PublicTagsApiTests(TestCase):\n    \"\"\"Test the publicly/Unauthenticated available tags API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_auth_required(self):\n        \"\"\"Test that authentication is required for retrieving tags\"\"\"\n        res = self.client.get(TAGS_URL)",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "TAGS_URL",
        "kind": 5,
        "importPath": "app.recipe.tests.test_tags_api",
        "description": "app.recipe.tests.test_tags_api",
        "peekOfCode": "TAGS_URL = reverse('recipe:tag-list')\ndef detail_url(tag_id):\n    \"\"\"Create and return a recipe detail URL\"\"\"\n    return reverse('recipe:tag-detail', args=[tag_id])\ndef create_user(email='user@examp.com', password='testpass'):\n    \"\"\"Create and return a User\"\"\"\n    return get_user_model().objects.create_user(email, password)\nclass PublicTagsApiTests(TestCase):\n    \"\"\"Test the publicly/Unauthenticated available tags API\"\"\"\n    def setUp(self):",
        "detail": "app.recipe.tests.test_tags_api",
        "documentation": {}
    },
    {
        "label": "RecipeConfig",
        "kind": 6,
        "importPath": "app.recipe.apps",
        "description": "app.recipe.apps",
        "peekOfCode": "class RecipeConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'recipe'",
        "detail": "app.recipe.apps",
        "documentation": {}
    },
    {
        "label": "TagSerializer",
        "kind": 6,
        "importPath": "app.recipe.serializers",
        "description": "app.recipe.serializers",
        "peekOfCode": "class TagSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for tag APIs\"\"\"\n    class Meta:\n        model = Tag\n        fields = ['id', 'name']\n        read_only_fields = ('id',)\nclass IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for Ingredient APIs\"\"\"\n    class Meta:\n        model = Ingredient",
        "detail": "app.recipe.serializers",
        "documentation": {}
    },
    {
        "label": "IngredientSerializer",
        "kind": 6,
        "importPath": "app.recipe.serializers",
        "description": "app.recipe.serializers",
        "peekOfCode": "class IngredientSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for Ingredient APIs\"\"\"\n    class Meta:\n        model = Ingredient\n        fields = ['id', 'name']\n        read_only_fields = ('id',)\nclass RecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for recipe APIs\"\"\"\n    tags = TagSerializer(many=True, required=False)\n    ingredients = IngredientSerializer(many=True, required=False)",
        "detail": "app.recipe.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeSerializer",
        "kind": 6,
        "importPath": "app.recipe.serializers",
        "description": "app.recipe.serializers",
        "peekOfCode": "class RecipeSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for recipe APIs\"\"\"\n    tags = TagSerializer(many=True, required=False)\n    ingredients = IngredientSerializer(many=True, required=False)\n    class Meta:\n        model = Recipe\n        fields = (\n            'id',\n            'title',\n            'link',",
        "detail": "app.recipe.serializers",
        "documentation": {}
    },
    {
        "label": "RecipeDetailSerializer",
        "kind": 6,
        "importPath": "app.recipe.serializers",
        "description": "app.recipe.serializers",
        "peekOfCode": "class RecipeDetailSerializer(RecipeSerializer):\n    \"\"\"Serializer for recipe detail view APIs\"\"\"\n    class Meta(RecipeSerializer.Meta):\n        model = Recipe\n        fields = RecipeSerializer.Meta.fields + ('description',)",
        "detail": "app.recipe.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.recipe.urls",
        "description": "app.recipe.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('recipes', views.RecipeViewSet)\nrouter.register('tags', views.TagViewSet)\nrouter.register('ingredients', views.IngredientViewSet)\napp_name = 'recipe'\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "app.recipe.urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.recipe.urls",
        "description": "app.recipe.urls",
        "peekOfCode": "app_name = 'recipe'\nurlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "app.recipe.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.recipe.urls",
        "description": "app.recipe.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "app.recipe.urls",
        "documentation": {}
    },
    {
        "label": "RecipeViewSet",
        "kind": 6,
        "importPath": "app.recipe.views",
        "description": "app.recipe.views",
        "peekOfCode": "class RecipeViewSet(viewsets.ModelViewSet):\n    \"\"\"View for manage Recipe APIs\"\"\"\n    serializer_class = serializers.RecipeDetailSerializer\n    queryset = Recipe.objects.all()\n    authentication_classes = (TokenAuthentication,)\n    permission_classes = (IsAuthenticated,)\n    def get_queryset(self):\n        \"\"\"Retrieves recipes for authenticated users\"\"\"\n        return self.queryset.filter(user=self.request.user).order_by('-id')\n    def get_serializer_class(self):",
        "detail": "app.recipe.views",
        "documentation": {}
    },
    {
        "label": "BaseRecipeAtrrViewSet",
        "kind": 6,
        "importPath": "app.recipe.views",
        "description": "app.recipe.views",
        "peekOfCode": "class BaseRecipeAtrrViewSet(mixins.ListModelMixin,\n                            viewsets.GenericViewSet,\n                            mixins.CreateModelMixin,\n                            mixins.UpdateModelMixin,\n                            mixins.DestroyModelMixin):\n    \"\"\"Base viewset for Recipe Attribute\"\"\"\n    authentication_classes = (TokenAuthentication,)\n    permission_classes = (IsAuthenticated,)\n    def get_queryset(self):\n        \"\"\"Filter queryset to authnticated user.\"\"\"",
        "detail": "app.recipe.views",
        "documentation": {}
    },
    {
        "label": "TagViewSet",
        "kind": 6,
        "importPath": "app.recipe.views",
        "description": "app.recipe.views",
        "peekOfCode": "class TagViewSet(BaseRecipeAtrrViewSet):\n    \"\"\"Manage tags in the database\"\"\"\n    serializer_class = serializers.TagSerializer\n    queryset = Tag.objects.all()\nclass IngredientViewSet(BaseRecipeAtrrViewSet):\n    \"\"\"Manage Ingredient in the database\"\"\"\n    serializer_class = serializers.IngredientSerializer\n    queryset = Ingredient.objects.all()",
        "detail": "app.recipe.views",
        "documentation": {}
    },
    {
        "label": "IngredientViewSet",
        "kind": 6,
        "importPath": "app.recipe.views",
        "description": "app.recipe.views",
        "peekOfCode": "class IngredientViewSet(BaseRecipeAtrrViewSet):\n    \"\"\"Manage Ingredient in the database\"\"\"\n    serializer_class = serializers.IngredientSerializer\n    queryset = Ingredient.objects.all()",
        "detail": "app.recipe.views",
        "documentation": {}
    },
    {
        "label": "PublicUserApiTests",
        "kind": 6,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "class PublicUserApiTests(TestCase):\n    \"\"\"Tests the public features of the user API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_create_user_success(self):\n        \"\"\"test creating a user success\"\"\"\n        payload = {\n            'email': 'test@example.com',\n            'password': 'testpass123',\n            'name': 'Test Name',",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "PrivateUserApiTests",
        "kind": 6,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "class PrivateUserApiTests(TestCase):\n    \"\"\"Test API requests that requires authentication.`\"\"\"\n    def setUp(self):\n        self.user = create_user(\n            email='test@example.com',\n            password='testpass123',\n            name='Test Name'\n        )\n        self.client = APIClient()\n        self.client.force_authenticate(user=self.user)",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "def create_user(**params):\n    \"\"\"Create and return a new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):\n    \"\"\"Tests the public features of the user API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_create_user_success(self):\n        \"\"\"test creating a user success\"\"\"\n        payload = {",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "CREATE_USER_URL",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "CREATE_USER_URL = reverse('user:create')\nTOKEN_URL = reverse('user:token')\nME_URL = reverse('user:me')\ndef create_user(**params):\n    \"\"\"Create and return a new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):\n    \"\"\"Tests the public features of the user API\"\"\"\n    def setUp(self):\n        self.client = APIClient()",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "TOKEN_URL",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "TOKEN_URL = reverse('user:token')\nME_URL = reverse('user:me')\ndef create_user(**params):\n    \"\"\"Create and return a new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):\n    \"\"\"Tests the public features of the user API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_create_user_success(self):",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "ME_URL",
        "kind": 5,
        "importPath": "app.user.tests.test_user_api",
        "description": "app.user.tests.test_user_api",
        "peekOfCode": "ME_URL = reverse('user:me')\ndef create_user(**params):\n    \"\"\"Create and return a new user\"\"\"\n    return get_user_model().objects.create_user(**params)\nclass PublicUserApiTests(TestCase):\n    \"\"\"Tests the public features of the user API\"\"\"\n    def setUp(self):\n        self.client = APIClient()\n    def test_create_user_success(self):\n        \"\"\"test creating a user success\"\"\"",
        "detail": "app.user.tests.test_user_api",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "app.user.apps",
        "description": "app.user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'",
        "detail": "app.user.apps",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "app.user.serializers",
        "description": "app.user.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for the user Object Model\"\"\"\n    class Meta:\n        model = get_user_model()\n        fields = ('email', 'name', 'password')\n        extra_kwargs = {\n            'password': {\n                'write_only': True,\n                'min_length': 5,\n                'style': {'input_type': 'password'}",
        "detail": "app.user.serializers",
        "documentation": {}
    },
    {
        "label": "AuthTokenSerializer",
        "kind": 6,
        "importPath": "app.user.serializers",
        "description": "app.user.serializers",
        "peekOfCode": "class AuthTokenSerializer(serializers.Serializer):\n    \"\"\"Serializer for the user Auth token\"\"\"\n    email = serializers.EmailField(max_length=30)\n    password = serializers.CharField(\n        max_length=30,\n        style={'input_type': 'password'},\n        trim_whitespace=False,\n        )\n    def validate(self, attrs):\n        \"\"\"Validate and authenticate the user\"\"\"",
        "detail": "app.user.serializers",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "app.user.urls",
        "description": "app.user.urls",
        "peekOfCode": "app_name = 'user'\nurlpatterns = [\n    path('create/', views.CreateUserView.as_view(), name='create'),\n    path('token/', views.CreateTokenView.as_view(), name='token'),\n    path('me/', views.ManageUserView.as_view(), name='me'),\n]",
        "detail": "app.user.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.user.urls",
        "description": "app.user.urls",
        "peekOfCode": "urlpatterns = [\n    path('create/', views.CreateUserView.as_view(), name='create'),\n    path('token/', views.CreateTokenView.as_view(), name='token'),\n    path('me/', views.ManageUserView.as_view(), name='me'),\n]",
        "detail": "app.user.urls",
        "documentation": {}
    },
    {
        "label": "CreateUserView",
        "kind": 6,
        "importPath": "app.user.views",
        "description": "app.user.views",
        "peekOfCode": "class CreateUserView(generics.CreateAPIView):\n    \"\"\"Create a new user in the system\"\"\"\n    serializer_class = UserSerializer\nclass CreateTokenView(ObtainAuthToken):\n    \"\"\"Create a new auth token for user\"\"\"\n    serializer_class = AuthTokenSerializer\n    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES\nclass ManageUserView(generics.RetrieveUpdateAPIView):\n    \"\"\"Manage the authenticated user\"\"\"\n    serializer_class = UserSerializer",
        "detail": "app.user.views",
        "documentation": {}
    },
    {
        "label": "CreateTokenView",
        "kind": 6,
        "importPath": "app.user.views",
        "description": "app.user.views",
        "peekOfCode": "class CreateTokenView(ObtainAuthToken):\n    \"\"\"Create a new auth token for user\"\"\"\n    serializer_class = AuthTokenSerializer\n    renderer_classes = api_settings.DEFAULT_RENDERER_CLASSES\nclass ManageUserView(generics.RetrieveUpdateAPIView):\n    \"\"\"Manage the authenticated user\"\"\"\n    serializer_class = UserSerializer\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAuthenticated,)\n    def get_object(self):",
        "detail": "app.user.views",
        "documentation": {}
    },
    {
        "label": "ManageUserView",
        "kind": 6,
        "importPath": "app.user.views",
        "description": "app.user.views",
        "peekOfCode": "class ManageUserView(generics.RetrieveUpdateAPIView):\n    \"\"\"Manage the authenticated user\"\"\"\n    serializer_class = UserSerializer\n    authentication_classes = (authentication.TokenAuthentication,)\n    permission_classes = (permissions.IsAuthenticated,)\n    def get_object(self):\n        \"\"\"Retrieve and return authenticated user\"\"\"\n        return self.request.user",
        "detail": "app.user.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "app.manage",
        "description": "app.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "app.manage",
        "documentation": {}
    }
]